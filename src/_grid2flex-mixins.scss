// mixins
@mixin bp-from($bp-name) {
  $bp-value: map-get($breakpoints, $bp-name);

  @if ($bp-value > 0) {
    @media (min-width: $bp-value) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin check-breakpoint($element, $breakpoints: $breakpoints, $configuration: $configuration) {
  $breakpoints-enabled: map-get($configuration, breakpoints-enabled);

  @if $breakpoints-enabled {
    @each $bp-value, $breakpoint in $breakpoints {
      @include bp-from($bp-value) {
        .#{$element}-#{$bp-value} {
          @content;
        }
      }
    }
  } @else {
    .#{$element} {
      @content;
    }
  }
}

@mixin create-gutter($gutter, $configuration: $configuration) {
  $column: #{map-get($configuration, column)};

  margin-left: ($gutter / -2);
  margin-right: ($gutter / -2);

  > [class*="#{$column}-"] {
    padding-left: ($gutter / 2);
    padding-right: ($gutter / 2);
  }
}

@mixin create-grid($configuration: $configuration, $breakpoints: $breakpoints, $gutters: $gutters) {
  $columns-count: map-get($configuration, columns-count);
  $row: #{map-get($configuration, row)};
  $column: #{map-get($configuration, column)};
  $offsets-enabled: map-get($configuration, offsets-enabled);
  $breakpoints-enabled: map-get($configuration, breakpoints-enabled);

  %row {
    display: flex;
    flex: 1 1 0;
  }

  // rows and gutters
  @each $gutter-value, $gutter in $gutters {
    @if ($gutter-value != "gutter") {
      .#{$row}-#{$gutter-value} {
        @extend %row;
        @include create-gutter($gutter);
      }
    } @else {
      .#{$row} {
        @extend %row;
        @include create-gutter($gutter);
      }
    }
  }

  // columns
  [class*="#{$column}-"] {
    position: relative;
    min-height: 1px;
    background-clip: content-box !important;
    display: flex;

    > :not([class*="#{$column}-"]) {
      flex-basis: 100%;
    }
  }

  // width calculation mixin
  @mixin width-calculation($element) {
    @for $i from 0 through $columns-count {
      @if ($i > 0) {
        &-#{$i} {
          flex: 0 0 percentage($i / $columns-count);
        }
      } @else {
        // column width calculated automatically
        & {
          flex: 1 1 0;
        }
      }
    }

    &-auto {
      flex: 0 1 auto;
    }
  }

  // offset calculation mixin
  @mixin offset-calculation($element) {
    @for $i from 1 through $columns-count {
      &-offset-#{$i - 1} {
        margin-left: percentage(($i - 1)/$columns-count);
      }
    }
  }

  @include check-breakpoint($column) {
    @include width-calculation($column);
    @include offset-calculation($column);
  }
}

// helpers
@mixin create-grid-helpers($configuration: $configuration, $breakpoints: $breakpoints) {
  $row: #{map-get($configuration, row)};
  $column: #{map-get($configuration, column)};
  $row-vertical-alignment-enabled: map-get($configuration, row-vertical-alignment-enabled);
  $row-horizontal-alignment-enabled: map-get($configuration, row-horizontal-alignment-enabled);
  $column-vertical-alignment-enabled: map-get($configuration, column-vertical-alignment-enabled);
  $breakpoints-enabled: map-get($configuration, breakpoints-enabled);

  @mixin row-vertical-alignment($element) {
    @include check-breakpoint($element) {
      &--top {
        align-items: flex-start;
      }

      &--middle {
        align-items: center;
      }

      &--bottom {
        align-items: flex-end;
      }

      &--stretch {
        align-items: stretch;
      }
    }
  }

  @mixin row-horizontal-alignment($element) {
    @include check-breakpoint($element) {
      &--left {
        justify-content: flex-start;
      }

      &--center {
        justify-content: center;
      }

      &--right {
        justify-content: flex-end;
      }

      &--between {
        justify-content: space-between;
      }

      &--around {
        justify-content: space-around;
      }
    }
  }

  @mixin row-wrap($element) {
    @include check-breakpoint($element) {
      &--multi {
        flex-wrap: wrap;
      }

      &--line {
        flex-wrap: nowrap;
      }
    }
  }

  @mixin column-vertical-alignment($element) {
    @include check-breakpoint($element) {
      &--top {
        align-self: flex-start;
      }

      &--middle {
        align-self: center;
      }

      &--bottom {
        align-self: flex-end;
      }

      &--stretch {
        align-self: stretch;
      }
    }
  }

  @include row-wrap(#{$row});

  @if $row-vertical-alignment-enabled {
    @include row-vertical-alignment(#{$row});
  }

  @if $row-horizontal-alignment-enabled {
    @include row-horizontal-alignment(#{$row});
  }

  @if $column-vertical-alignment-enabled {
    @include column-vertical-alignment(#{$column});
  }
}