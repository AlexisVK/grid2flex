// mixins
@mixin bp-from($bp-name) {
	$bp-value: map-get($breakpoints, $bp-name);

	@if ($bp-value > 0) {
		@media (min-width: $bp-value) {
			@content;
		}
	} @else {
		@content;
	}
}

@mixin create-gutter($gutter, $configuration: $configuration) {
	$column: #{map-get($configuration, column)};

	margin-left: ($gutter / -2);
	margin-right: ($gutter / -2);

	[class*="#{$column}-"] {
		padding-left: ($gutter / 2);
		padding-right: ($gutter / 2);
	}
}

@mixin create-grid($breakpoints: $breakpoints, $gutters: $gutters, $configuration: $configuration) {
	$row: #{map-get($configuration, row)};
	$column: #{map-get($configuration, column)};
	$offsets-enabled: map-get($configuration, offsets-enabled);
	$columns-count: map-get($configuration, columns-count);

	// @extends
	%row {
		display: flex;
		flex-flow: row wrap;
	}

	%column {
		display: flex;
		position: relative;
		min-height: 1px;
		background-clip: content-box !important;
	}

	// rows and gutters
	@each $gutter-value, $gutter in $gutters {
		@if ($gutter != 0) {
			@if ($gutter-value != "gutter-default") {
				.#{$row}-#{$gutter-value} {
					@extend %row;
					@include create-gutter($gutter);
				}
			} @else {
				.#{$row} {
					@extend %row;
					@include create-gutter($gutter);
				}
			}
		} @else {
			.#{$row}-#{$gutter-value} {
				@extend %row;
			}
		}
	}

	// columns
	[class*="#{$column}-"] {
		@extend %column;
	}

	@each $bp-value, $breakpoint in $breakpoints {
		@include bp-from($bp-value) {
			@for $i from 1 through $columns-count {
				.#{$column}-#{$bp-value}-#{$i} {
					width: percentage($i / $columns-count);
				}
			}

			// create offsets for columns if enavle
			@if $offsets-enabled {
				@for $i from 1 through $columns-count {
					.#{$column}-#{$bp-value}-offset-#{$i - 1} {
						margin-left: percentage(($i - 1)/$columns-count);
					}
				}
			}
		}
	}
}

// helpers
@mixin create-grid-helpers($configuration: $configuration, $breakpoints: $breakpoints) {
	$row: #{map-get($configuration, row)};
	$column: #{map-get($configuration, column)};
	$row-vertical-alignment-enabled: map-get($configuration, row-vertical-alignment-enabled);
	$row-horizontal-alignment-enabled: map-get($configuration, row-horizontal-alignment-enabled);
	$column-vertical-alignment-enabled: map-get($configuration, column-vertical-alignment-enabled);

	.#{$row} {
		@each $bp-value, $breakpoint in $breakpoints {
			@include bp-from($bp-value) {
				// row vertical alignment helper
				@if $row-vertical-alignment-enabled {
					&-#{$bp-value}-top {
						align-items: flex-start;
					}

					&-#{$bp-value}-middle {
						align-items: flex-center;
					}

					&-#{$bp-value}-bottom {
						align-items: flex-end;
					}
				}

				// row horizontal alignment helper
				@if $row-vertical-alignment-enabled {
					&-#{$bp-value}-left {
						justify-content: flex-start;
					}

					&-#{$bp-value}-right {
						justify-content: flex-end;
					}

					&-#{$bp-value}-center {
						justify-content: center;
					}

					&-#{$bp-value}-between {
						justify-content: space-between;
					}

					&-#{$bp-value}-around {
						justify-content: space-around;
					}
				}
			}
		}
	}

	.#{$column} {
		@each $bp-value, $breakpoint in $breakpoints {
			@include bp-from($bp-value) {
				&-#{$bp-value}-top {
					align-self: flex-start;
				}

				&-#{$bp-value}-middle {
					align-self: flex-center;
				}

				&-#{$bp-value}-bottom {
					align-self: flex-end;
				}

				&-#{$bp-value}-first {
					order: -1;
				}

				&-#{$bp-value}-last {
					order: 1;
				}
			}
		}
	}
}